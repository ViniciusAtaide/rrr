"""
All input for the create `Phone` mutation.
"""
input CreatePhoneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Phone` to be created by this mutation.
  """
  phone: PhoneInput!
}

"""
The output of our create `Phone` mutation.
"""
type CreatePhonePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Phone` that was created by this mutation.
  """
  phone: Phone

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Place` that is related to this `Phone`.
  """
  placeByPlaceId: Place

  """
  An edge for our `Phone`. May be used by Relay 1.
  """
  phoneEdge(
    """
    The method to use when ordering `Phone`.
    """
    orderBy: [PhonesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PhonesEdge
}

"""
All input for the create `Place` mutation.
"""
input CreatePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Place` to be created by this mutation.
  """
  place: PlaceInput!
}

"""
The output of our create `Place` mutation.
"""
type CreatePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Place` that was created by this mutation.
  """
  place: Place

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Place`. May be used by Relay 1.
  """
  placeEdge(
    """
    The method to use when ordering `Place`.
    """
    orderBy: [PlacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlacesEdge
}

"""
All input for the create `User` mutation.
"""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `User` to be created by this mutation.
  """
  user: UserInput!
}

"""
The output of our create `User` mutation.
"""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was created by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
All input for the `deletePhoneById` mutation.
"""
input DeletePhoneByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _id: Int!
}

"""
All input for the `deletePhone` mutation.
"""
input DeletePhoneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Phone` to be deleted.
  """
  nodeId: ID!
}

"""
The output of our delete `Phone` mutation.
"""
type DeletePhonePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Phone` that was deleted by this mutation.
  """
  phone: Phone
  deletedPhoneId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Place` that is related to this `Phone`.
  """
  placeByPlaceId: Place

  """
  An edge for our `Phone`. May be used by Relay 1.
  """
  phoneEdge(
    """
    The method to use when ordering `Phone`.
    """
    orderBy: [PhonesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PhonesEdge
}

"""
All input for the `deletePlaceById` mutation.
"""
input DeletePlaceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _id: Int!
}

"""
All input for the `deletePlace` mutation.
"""
input DeletePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Place` to be deleted.
  """
  nodeId: ID!
}

"""
The output of our delete `Place` mutation.
"""
type DeletePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Place` that was deleted by this mutation.
  """
  place: Place
  deletedPlaceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Place`. May be used by Relay 1.
  """
  placeEdge(
    """
    The method to use when ordering `Place`.
    """
    orderBy: [PlacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlacesEdge
}

"""
All input for the `deleteUserByEmail` mutation.
"""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""
All input for the `deleteUserById` mutation.
"""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  _id: Int!
}

"""
All input for the `deleteUser` mutation.
"""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""
The output of our delete `User` mutation.
"""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was deleted by this mutation.
  """
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `Phone`.
  """
  createPhone(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePhoneInput!
  ): CreatePhonePayload

  """
  Creates a single `Place`.
  """
  createPlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlaceInput!
  ): CreatePlacePayload

  """
  Creates a single `User`.
  """
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  Updates a single `Phone` using its globally unique id and a patch.
  """
  updatePhone(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhoneInput!
  ): UpdatePhonePayload

  """
  Updates a single `Phone` using a unique key and a patch.
  """
  updatePhoneById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePhoneByIdInput!
  ): UpdatePhonePayload

  """
  Updates a single `Place` using its globally unique id and a patch.
  """
  updatePlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaceInput!
  ): UpdatePlacePayload

  """
  Updates a single `Place` using a unique key and a patch.
  """
  updatePlaceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaceByIdInput!
  ): UpdatePlacePayload

  """
  Updates a single `User` using its globally unique id and a patch.
  """
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """
  Updates a single `User` using a unique key and a patch.
  """
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """
  Deletes a single `Phone` using its globally unique id.
  """
  deletePhone(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhoneInput!
  ): DeletePhonePayload

  """
  Deletes a single `Phone` using a unique key.
  """
  deletePhoneById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePhoneByIdInput!
  ): DeletePhonePayload

  """
  Deletes a single `Place` using its globally unique id.
  """
  deletePlace(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaceInput!
  ): DeletePlacePayload

  """
  Deletes a single `Place` using a unique key.
  """
  deletePlaceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaceByIdInput!
  ): DeletePlacePayload

  """
  Deletes a single `User` using its globally unique id.
  """
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """
  Deletes a single `User` using a unique key.
  """
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

type Phone implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  _id: Int!
  number: String!
  placeId: Int

  """
  Reads a single `Place` that is related to this `Phone`.
  """
  placeByPlaceId: Place
}

"""
A condition to be used against `Phone` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PhoneCondition {
  """
  Checks for equality with the object’s `_id` field.
  """
  _id: Int

  """
  Checks for equality with the object’s `number` field.
  """
  number: String

  """
  Checks for equality with the object’s `placeId` field.
  """
  placeId: Int
}

"""
An input for mutations affecting `Phone`
"""
input PhoneInput {
  _id: Int
  number: String!
  placeId: Int
}

"""
Represents an update to a `Phone`. Fields that are set will be updated.
"""
input PhonePatch {
  _id: Int
  number: String
  placeId: Int
}

"""
A connection to a list of `Phone` values.
"""
type PhonesConnection {
  """
  A list of `Phone` objects.
  """
  nodes: [Phone]!

  """
  A list of edges which contains the `Phone` and cursor to aid in pagination.
  """
  edges: [PhonesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Phone` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Phone` edge in the connection.
"""
type PhonesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Phone` at the end of the edge.
  """
  node: Phone
}

"""
Methods to use when ordering `Phone`.
"""
enum PhonesOrderBy {
  NATURAL
  _ID_ASC
  _ID_DESC
  NUMBER_ASC
  NUMBER_DESC
  PLACE_ID_ASC
  PLACE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Place implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  _id: Int!
  latitude: String!
  longitude: String!
  name: String!
  email: String

  """
  Reads and enables pagination through a set of `Phone`.
  """
  phonesByPlaceId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Phone`.
    """
    orderBy: [PhonesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhoneCondition
  ): PhonesConnection!
}

"""
A condition to be used against `Place` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PlaceCondition {
  """
  Checks for equality with the object’s `_id` field.
  """
  _id: Int

  """
  Checks for equality with the object’s `latitude` field.
  """
  latitude: String

  """
  Checks for equality with the object’s `longitude` field.
  """
  longitude: String

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `email` field.
  """
  email: String
}

"""
An input for mutations affecting `Place`
"""
input PlaceInput {
  _id: Int
  latitude: String!
  longitude: String!
  name: String!
  email: String
}

"""
Represents an update to a `Place`. Fields that are set will be updated.
"""
input PlacePatch {
  _id: Int
  latitude: String
  longitude: String
  name: String
  email: String
}

"""
A connection to a list of `Place` values.
"""
type PlacesConnection {
  """
  A list of `Place` objects.
  """
  nodes: [Place]!

  """
  A list of edges which contains the `Place` and cursor to aid in pagination.
  """
  edges: [PlacesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Place` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Place` edge in the connection.
"""
type PlacesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Place` at the end of the edge.
  """
  node: Place
}

"""
Methods to use when ordering `Place`.
"""
enum PlacesOrderBy {
  NATURAL
  _ID_ASC
  _ID_DESC
  LATITUDE_ASC
  LATITUDE_DESC
  LONGITUDE_ASC
  LONGITUDE_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `Phone`.
  """
  allPhones(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Phone`.
    """
    orderBy: [PhonesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PhoneCondition
  ): PhonesConnection

  """
  Reads and enables pagination through a set of `Place`.
  """
  allPlaces(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Place`.
    """
    orderBy: [PlacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaceCondition
  ): PlacesConnection

  """
  Reads and enables pagination through a set of `User`.
  """
  allUsers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  phoneById(_id: Int!): Phone
  placeById(_id: Int!): Place
  userById(_id: Int!): User
  userByEmail(email: String!): User

  """
  Reads a single `Phone` using its globally unique `ID`.
  """
  phone(
    """
    The globally unique `ID` to be used in selecting a single `Phone`.
    """
    nodeId: ID!
  ): Phone

  """
  Reads a single `Place` using its globally unique `ID`.
  """
  place(
    """
    The globally unique `ID` to be used in selecting a single `Place`.
    """
    nodeId: ID!
  ): Place

  """
  Reads a single `User` using its globally unique `ID`.
  """
  user(
    """
    The globally unique `ID` to be used in selecting a single `User`.
    """
    nodeId: ID!
  ): User
}

"""
All input for the `updatePhoneById` mutation.
"""
input UpdatePhoneByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Phone` being updated.
  """
  phonePatch: PhonePatch!
  _id: Int!
}

"""
All input for the `updatePhone` mutation.
"""
input UpdatePhoneInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Phone` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Phone` being updated.
  """
  phonePatch: PhonePatch!
}

"""
The output of our update `Phone` mutation.
"""
type UpdatePhonePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Phone` that was updated by this mutation.
  """
  phone: Phone

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Place` that is related to this `Phone`.
  """
  placeByPlaceId: Place

  """
  An edge for our `Phone`. May be used by Relay 1.
  """
  phoneEdge(
    """
    The method to use when ordering `Phone`.
    """
    orderBy: [PhonesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PhonesEdge
}

"""
All input for the `updatePlaceById` mutation.
"""
input UpdatePlaceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Place` being updated.
  """
  placePatch: PlacePatch!
  _id: Int!
}

"""
All input for the `updatePlace` mutation.
"""
input UpdatePlaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Place` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Place` being updated.
  """
  placePatch: PlacePatch!
}

"""
The output of our update `Place` mutation.
"""
type UpdatePlacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Place` that was updated by this mutation.
  """
  place: Place

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `Place`. May be used by Relay 1.
  """
  placeEdge(
    """
    The method to use when ordering `Place`.
    """
    orderBy: [PlacesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlacesEdge
}

"""
All input for the `updateUserByEmail` mutation.
"""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  email: String!
}

"""
All input for the `updateUserById` mutation.
"""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  _id: Int!
}

"""
All input for the `updateUser` mutation.
"""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""
The output of our update `User` mutation.
"""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `User` that was updated by this mutation.
  """
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  An edge for our `User`. May be used by Relay 1.
  """
  userEdge(
    """
    The method to use when ordering `User`.
    """
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
Default users from System
"""
type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  _id: Int!
  name: String!
  email: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """
  Checks for equality with the object’s `_id` field.
  """
  _id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `email` field.
  """
  email: String
}

"""
An input for mutations affecting `User`
"""
input UserInput {
  _id: Int
  name: String!
  email: String!
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  _id: Int
  name: String
  email: String
}

"""
A connection to a list of `User` values.
"""
type UsersConnection {
  """
  A list of `User` objects.
  """
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `User` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `User` edge in the connection.
"""
type UsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `User` at the end of the edge.
  """
  node: User
}

"""
Methods to use when ordering `User`.
"""
enum UsersOrderBy {
  NATURAL
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
